//Copyright (C) 2013 Potix Corporation. All Rights Reserved.
//History: Mon, Jan 14, 2013  4:56:56 PM
// Author: tomyeh
part of stream_rspc;

/**
 * The RSP compiler
 */
class Compiler {
  final String sourceName;
  final String source;
  final OutputStream destination;
  final Encoding encoding;
  final bool verbose;
  //the closure's name, args
  String _name, _args, _desc;
  ContentType _contentType;
  final List<_TagContext> _tags = [];
  _TagContext _current;
  //The position of the source
  int _pos, _len;
  //Look-ahead tokens
  final List _lookAhead = [];

  Compiler(String this.source, OutputStream this.destination, {
    String this.sourceName,
    Encoding this.encoding:Encoding.UTF_8,
    bool this.verbose: false});

  void compile() {
    destination.writeString("//Auto-generated by RSP Compiler\n");
    if (sourceName != null)
      destination.writeString("//Source: ${sourceName}\n");

    _init();

    bool pgFound = false, started = false;
    int line = 1;
    for (var token; (token = _nextToken()) != null; line = _current.line) {
      if (token is String) {
        String text = token;
        if (!started) {
          if (text.trim().isEmpty)
            continue; //skip it
          started = true;
          _start(line);
        }
        _writeText(text, line);
      }
    }

    if (started)
      _writeln("}");
  }
  void _init() {
    _lookAhead.clear();
    _tags.clear();
    _tags.add(_current = new _TagContext(null, 1, null, destination, "", this));
    _name = _args = _desc = null;
    _contentType = null;
    _pos = 0;
    _len = source.length;
  }
  void _start(int line) {
    if (_name == null) {
      if (sourceName == null || sourceName.isEmpty)
        _error("The page directive with the name attribute is required", line);

      final i = sourceName.lastIndexOf('/') + 1,
        j = sourceName.indexOf('.', i);
      _name = StringUtil.camelize(
        j >= 0 ? sourceName.substring(i, j): sourceName.substring(i));
    }

    if (_desc == null)
      _desc = "Template, $_name, for rendering the view.";

    if (_contentType == null && sourceName != null) {
      final i = sourceName.lastIndexOf('.');
      if (i >= 0) {
        final ct = contentTypes[sourceName.substring(i + 1)];
        if (ct != null)
          _contentType = new ContentType(ct);
      }
    }

    final pre = _current.pre = "  ";
    _write("\n/** $_desc */\nvoid $_name(HttpConnect connect");
    if (_args != null)
      _write(", {$_args}");
    _writeln(") { //$line\n"
      "${pre}HttpRequest request = connect.request;\n"
      "${pre}HttpRequest response = connect.response;\n"
      "${pre}OutputStream output = response.outputStream;\n");

    if (_contentType != null)
      _writeln('${pre}response.headers.contentType = new ContentType.fromString("${_contentType}");\n');
  }

  /// Sets the page information.
  void setPage(String name, String args, String description, ContentType contentType) {
    _name = name;
    _args = args;
    _desc = description;
    _contentType = contentType;
  }

  //Tokenizer//
  _nextToken() {
    if (!_lookAhead.isEmpty)
      return _lookAhead.removeLast();

    final sb = new StringBuffer();
    final token = _specialToken(sb);
    if (sb.isEmpty)
      return token;
    if (token != null)
      _lookAhead.add(token);
    return sb.toString();
  }
  _specialToken(StringBuffer sb) {
    while (_pos < _len) {
      final cc = source[_pos];
      if (cc == '[') {
        final j = _pos + 1;
        if (j < _len) {
          final c2 = source[j];
          if (c2 == '*') { //comment
            _pos = _skipUntil("*]", j + 1) + 2;
            continue;
          } else if (c2 == '=') { //exprssion
            _pos = j + 1;
            return new _Expr();
          } else if (StringUtil.isChar(c2, lower:true)) {
            int k = _skipId(j);
            final tag = tags[source.substring(j, k)];
            if (tag != null) { //tag found
              _pos = k;
              return tag;
            }
            //fall through
          }
        }
      } else if (cc == '\\') {
        final j = _pos + 1;
        if (j < _len && source[j] == '[') {
          sb.add('['); //\[ => [
          _pos += 2;
          continue;
        }
      } else if (cc == '\n') {
        _current.line++;
      }
      sb.add(cc);
      ++_pos;
    } //for each cc
    return null;
  }
  int _skipUntil(String until, int from, {bool quotmark: false}) {
    final line = _current.line;
    final nUtil = until.length;
    String sep, first = until[0];
    for (; from < _len; ++from) {
      final cc = source[from];
      if (sep == null) {
        if (quotmark && (cc == '"' || cc == "'"))
          sep = cc;
        else if (cc == first) {
          if (from + nUtil > _len)
            break;
          for (int n = nUtil;;) {
            if (--n < 1) //matched
              return from;

            if (source[from + n] != until[n])
              break;
          }
        }
      } else if (cc == sep) {
        sep = null;
      } else if (cc == '\\' && from + 1 < _len) {
        ++from;
      }
    }
    _error("Expect '$until'", line);
  }
  int _skipId(int from) {
    for (; from < _len; ++from) {
      final cc = source[from];
      if (!StringUtil.isChar(cc, lower:true, upper:true))
        break;
    }
    return from;
  }

  //Utilities//
  void _writeText(String text, [int line]) {
    final pre = _current.pre;
    int i = 0, j;
    while ((j = text.indexOf('"""', i)) >= 0) {
      if (line != null) {
        _writeln("$pre//#$line");
        line = null;
      }
      _writeln('${pre}output.writeString("""${text.substring(i, j)}""");\n'
        '${pre}output.writeString(\'"""\');');
      i = j + 3;
    }
    if (i == 0) {
      _write('${pre}output.writeString("""$text""");');
      if (line != null) _writeln(" //#$line");
    } else {
      _writeln('${pre}output.writeString("""${text.substring(i)}""");');
    }
  }
  void _write(String str) {
    _current.write(str);
  }
  void _writeln([String str]) {
    if (?str) _current.writeln(str);
    else _current.writeln();
  }

  String _toComment(String text) {
    text = text.replaceAll("\n", "\\n");
    return text.length > 30 ? "${text.substring(0, 27)}...": text;
  }
  void _error(String message, [int line]) {
    throw new SyntaxException(sourceName, line != null ? line: _current.line, message);
  }
  void _warning(String message, [int line]) {
    print("$sourceName:${line != null ? line: _current.line}: Warning! $message");
  }
}

///Syntax error.
class SyntaxException implements Exception {
  String _msg;
  ///The source name
  final String sourceName;
  ///The line number
  final int line;
  SyntaxException(String this.sourceName, int this.line, String message) {
    _msg = "$sourceName:$line: $message";
  }
  String get message => _msg;
}

class _TagContext extends TagContext {
  ///The tag
  Tag tag;
  ///The line number
  int line;

  _TagContext(Tag this.tag, int this.line, Tag parent, OutputStream output, String pre,
    Compiler compiler)
    : super(parent, output, pre, compiler);
}
class _Expr {
}
