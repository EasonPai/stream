//Auto-generated by RSP Compiler
//Source: syntax.rsp.html
library syntax_rsp;

import 'dart:async';
import 'dart:io';
import 'package:stream/stream.dart';
import 'dart:collection' show LinkedHashMap;

/** Template, syntax, for rendering the view. */
Future syntax(HttpConnect connect, {foo, bool c:false}) { //#4
  var _t0_, _cs_ = new List<HttpConnect>();
  HttpRequest request = connect.request;
  HttpResponse response = connect.response;

  response.headers.contentType = ContentType.parse("${Rsp.nns(foo.contentType)}");

  response.headers..add("age", "129")
    ..add("accept-ranges", foo.acceptRanges); //header#4

  response.headers..add("Cache-Control", "no-cache"); //header#5

  response.write("""<!DOCTYPE html>
<html>
  <head>
    <title>"""); //#6

  response.write(Rsp.nnx("$foo.name [${foo.title}]")); //#9


  response.write("""</title>
  </head>
  <body>
    <p>This is a test with ""\" and \\ and ""\\".
    <p>Another expresion: \""""); //#9

  response.write(Rsp.nnx(foo.description)); //#13


  response.write(""""
    <p>An empty expression: """); //#13

  response.write("""

    <p>This is not a tag: [:foo ], [:another and [/none].
    <ul>
"""); //#15

  for (var user in foo.friends) { //for#18

    response.write("""      <li>"""); //#19

    response.write(Rsp.nnx(user.name)); //#19


    response.write("""

"""); //#19

    if (user.isCustomer) { //if#20

      response.write("""      <i>!important!</i>
"""); //#21
    } //if

    while (user.hasMore()) { //while#23

      response.write("""        """); //#24

      response.write(Rsp.nnx(user.showMore())); //#24


      response.write("""

"""); //#24
    } //while

    response.write("""      </li>
"""); //#26
  } //for

  response.write("""    </ul>

"""); //#28

  for (var fruit in ["apple", "orange"]) { //for#30
  } //for

  response.write("""

"""); //#32

  if (foo.isCustomer) { //if#33

    response.write("""      *Custmer*
"""); //#34

  } else if (c) { //else#35

    return connect.forward("/x/y/z"); //forward#36

  } else if (foo.isEmployee) { //else#37

    response.write("""      *Employee*
"""); //#38

    return Rsp.nnf(syntax(connect, c: true, foo: "abc")); //forward#39

  } else { //else#40

    response.write("""      *Unknown* [/if] 
"""); //#41
  } //if

  response.write("""

"""); //#43

  var whatever = new StringBuffer(); _cs_.add(connect); //var#44
  connect = new HttpConnect.stringBuffer(connect, whatever); response = connect.response;

  response.write("""    define a variable
"""); //#45

  for (var fruit in ["apple", "orange"]) { //for#46

    response.write("""        """); //#47

    response.write(Rsp.nnx(fruit)); //#47


    response.write("""

"""); //#47
  } //for

  connect = _cs_.removeLast(); response = connect.response;
  whatever = whatever.toString();

  response.write("""

"""); //#50

  return connect.include("/abc").then((_) { //include#51

    var _0 = new StringBuffer(); _cs_.add(connect); //var#53
    connect = new HttpConnect.stringBuffer(connect, _0); response = connect.response;

    response.write("""      The content for foo
"""); //#54

    connect = _cs_.removeLast(); response = connect.response;

    return Rsp.nnf(syntax(new HttpConnect.chain(connect), c: true, foo: _0.toString())).then((_) { //include#52

      response.write("""

"""); //#57

      if (foo.isMeaningful) { //if#58

        response.write("""      something is meaningful
"""); //#59

        return connect.forward(Rsp.cat("/foo?abc", {'first': "1st", 'second': foo})); //forward#60
      } //if

      response.write(Rsp.script(connect, "/script/foo.dart", true)); //script#62

      response.write("""  </body>
</html>
"""); //#63

      response..write("<script>")..write("foo1")..write("=") //json-js#65
       ..write(Rsp.json(foo.name.length ~/ 2))..writeln('</script>');
      response..write('<script type="text/plain" id="') //json#66
       ..write("foo2")..write('">')
       ..write(Rsp.json(foo.name.length ~/ 2 * "/]".length))..writeln('</script>');

      response.write("""

"""); //#67

      response.write("""

"""); //#69

      return Rsp.nnf();
    }); //end-of-include
  }); //end-of-include
}
